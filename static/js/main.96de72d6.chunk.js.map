{"version":3,"sources":["components/helpers.js","components/Countdown.js","components/Period.js","components/svg/times.svg","components/SettingsModal.js","components/svg/fa-cog.svg","components/SettingsIcon.js","components/AppContent.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["convertToEST","time","Countdown","props","useState","timeLeft","setTimeLeft","times","useEffect","fromTheStartOfDay","Math","round","Date","now","dayToday","getDay","toString","forEach","period","start","end","displayString","floor","Period","display","setDisplay","dayMap","update","richContext","undefined","loadedRC","localStorage","getItem","event","console","log","btoa","JSON","stringify","SettingsModal","editors","setEditors","files","setFiles","out","Object","keys","key","key2","lsc","preFillValue","push","Fragment","className","type","defaultValue","onInput","e","id","value","target","setItem","outFormated","dti","day","dayToString","src","alt","onClick","setShowSettings","localStorageExport","match","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","handleExport","accept","onChange","reader","FileReader","onload","contents","result","impored","parse","window","location","reload","readAsText","handleImport","SettingsIcon","showSettings","facog","AppContent","setTime","timesTable","setTimesTable","fetch","then","response","json","data","timerID","setInterval","clearInterval","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker","serviceWorkerRegistration","waiting","postMessage"],"mappings":"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","file":"static/js/main.96de72d6.chunk.js","sourcesContent":["const convertToEST = (time) => {\n  if (time - 18000 < 0) {\n    return time - 18000 + 86400; // time - 5hours (make it EST) and add a day (the date cannot be negative)\n  }\n  return time - 18000;\n};\nexport { convertToEST };\n","import React, { useState, useEffect } from \"react\";\nimport { convertToEST } from \"./helpers\";\n\nfunction Countdown(props) {\n  const [timeLeft, setTimeLeft] = useState(0);\n  const { times } = props;\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    const fromTheStartOfDay = convertToEST(\n      Math.round((Date.now() / 1000) % 86400)\n    );\n    const dayToday = new Date().getDay().toString();\n    if (dayToday === \"6\" || dayToday === \"7\") {\n      setTimeLeft(\"Imagine Having School on the Weekends\");\n      return;\n    }\n    if (!!times || !typeof times === \"undefined\") {\n      // data ready\n      const dayMap = [...times[\"any\"], ...times[dayToday]]; // ES6 deconstruct 2 elements into an array\n\n      dayMap.forEach((period) => {\n        if (\n          period.start <= fromTheStartOfDay &&\n          period.end >= fromTheStartOfDay\n        ) {\n          // found period\n          const timeLeft = period.end - fromTheStartOfDay;\n          let displayString = \"\";\n          if (timeLeft / 3600 > 1) {\n            displayString += `${Math.floor(timeLeft / 3600)}h`;\n          }\n          if (timeLeft / 60 > 1) {\n            displayString += ` ${Math.floor(\n              Math.floor(timeLeft % 3600) / 60\n            )}m`;\n          }\n          displayString += ` ${timeLeft % 60}s`;\n          setTimeLeft(displayString);\n        }\n      });\n    }\n  });\n  return <h1>{timeLeft}</h1>;\n}\n\nexport default Countdown;\n","import React, { useEffect, useState } from \"react\";\nimport { convertToEST } from \"./helpers\";\n\nconst Period = (props) => {\n  // Date.now()\n  const [display, setDisplay] = useState(\"Loading...\");\n  const { times } = props;\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    // This will run every frame update\n    // only after the use effect bellow this one finishes, nop\n\n    const fromTheStartOfDay = convertToEST(\n      Math.round((Date.now() / 1000) % 86400)\n    );\n    const dayToday = new Date().getDay().toString();\n    if (dayToday === \"6\" || dayToday === \"7\") {\n      setDisplay(\"Imagine Having School on the Weekends\");\n      return;\n    }\n    if (!!times || !typeof times === \"undefined\") {\n      // data ready\n      const dayMap = [...times[\"any\"], ...times[dayToday]]; // ES6 deconstruct 2 elements into an array\n      let update = false;\n\n      dayMap.forEach((period) => {\n        if (\n          period.start <= fromTheStartOfDay &&\n          period.end >= fromTheStartOfDay\n        ) {\n          let richContext = \"\";\n          if (period.richContext !== undefined) {\n            const loadedRC = localStorage.getItem(\"VRA_\" + period.richContext);\n            if (loadedRC !== null) richContext = ` | ${loadedRC}`;\n          }\n          setDisplay(`${period.event}${richContext}`);\n          update = true;\n        }\n      });\n      if (!update) {\n        console.log(\n          \"Error: No Section Found, Please report this to Vlad: \" +\n            btoa(JSON.stringify(times))\n        );\n      }\n    }\n  });\n\n  return <p>{display}</p>;\n};\n\nexport default Period;\n","export default __webpack_public_path__ + \"static/media/times.8ada58e8.svg\";","import React, { useState, useEffect } from \"react\";\nimport times from \"./svg/times.svg\";\n\nfunction dayToString(day) {\n  switch (day) {\n    case \"1\":\n      return \"Monday\";\n    case \"2\":\n      return \"Tuesday\";\n    case \"3\":\n      return \"Wednesday\";\n    case \"4\":\n      return \"Thrusday\";\n    case \"5\":\n      return \"Friday\";\n    case \"any\":\n      return \"Every Day\";\n    default:\n      return \"idk -> \" + day;\n  }\n}\n\nfunction SettingsModal(props) {\n  const [editors, setEditors] = useState(null);\n  const [files, setFiles] = useState(null);\n\n  const handleInput = (id, value) => {\n    localStorage.setItem(\"VRA_\" + id, value);\n  };\n\n  const handleExport = () => {\n    const localStorageExport = {};\n    Object.keys(localStorage).forEach((e) => {\n      if (e.match(/VRA_[0-9]*/)) {\n        localStorageExport[e] = localStorage.getItem(e);\n      }\n    });\n    // elaborate process to download file\n    const element = document.createElement(\"a\");\n    const file = new Blob([JSON.stringify(localStorageExport)], {\n      type: \"application/json\",\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = \"VRA_Export.json\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n\n  const handleImport = () => {\n    var reader = new FileReader();\n    reader.onload = (function (reader) {\n      return () => {\n        var contents = reader.result;\n        //var lines = contents.split(\"\\n\");\n        ////// data ready\n        const impored = JSON.parse(contents);\n        Object.keys(impored).forEach((element) => {\n          localStorage.setItem(element, impored[element]);\n        });\n        window.location.reload();\n      };\n    })(reader);\n\n    reader.readAsText(files);\n  };\n\n  useEffect(() => {\n    const { times } = props;\n    if (!!times || !typeof times === \"undefined\") {\n      // parsing\n      const out = {};\n\n      Object.keys(times).forEach((key) => {\n        out[key] = [];\n        times[key].forEach((key2) => {\n          if (key2.richContext !== undefined) {\n            const lsc = localStorage.getItem(\"VRA_\" + key2.richContext);\n            let preFillValue = \"\";\n            if (lsc !== null) preFillValue = lsc;\n            out[key].push(\n              <React.Fragment key={key2.richContext}>\n                <p>\n                  {key2.event} | ID: {key2.richContext}\n                </p>\n                <div className=\"richContextContainer\">\n                  <input\n                    className=\"richContextEditor\"\n                    type=\"text\"\n                    defaultValue={preFillValue}\n                    onInput={(e) =>\n                      handleInput(key2.richContext, e.target.value)\n                    }\n                  />\n                </div>\n              </React.Fragment>\n            );\n          }\n        });\n      });\n\n      // displaying\n      let outFormated = [];\n      Object.keys(out).forEach((key) => {\n        const dti = dayToString(key.toString());\n        outFormated.push(<h2 key={dti}>{dti}</h2>);\n        //outFormated.concat(out[key]);\n        outFormated = [...outFormated, ...out[key]];\n      });\n      setEditors(outFormated);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"modal\">\n      <img\n        src={times}\n        alt=\"Close!\"\n        className=\"modal-close\"\n        onClick={() => props.setShowSettings(false)}\n      />\n      <div className=\"richContextEditors\">\n        {editors}{\" \"}\n        <div className=\"footer\">\n          <button onClick={() => handleExport()}>Export!</button>\n          <input\n            type=\"file\"\n            accept=\".json, .txt\"\n            onChange={(event) => {\n              setFiles(event.target.files[0]);\n            }}\n            onClick={(event) => {\n              event.target.value = null;\n            }}\n          ></input>\n          <button onClick={() => handleImport()}>Submit</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SettingsModal;\n","export default __webpack_public_path__ + \"static/media/fa-cog.349ce3a7.svg\";","import React, { useState } from \"react\";\nimport SettingsModal from \"./SettingsModal\";\nimport facog from \"./svg/fa-cog.svg\";\n\nfunction SettingsIcon(props) {\n  const [showSettings, setShowSettings] = useState(false);\n\n  return (\n    <>\n      <img\n        src={facog}\n        className=\"settings-icon\"\n        alt=\"Settings Icon\"\n        onClick={() => setShowSettings(true)}\n      ></img>\n      {showSettings ? (\n        <SettingsModal setShowSettings={setShowSettings} times={props.times} />\n      ) : null}\n    </>\n  );\n}\n\nexport default SettingsIcon;\n//    <button className=\"ajfalsd\" style={{ backgroundImage: `url(${facog})` }} />\n","import React, { useState, useEffect } from \"react\";\nimport Countdown from \"./Countdown\";\nimport Period from \"./Period\";\nimport SettingsIcon from \"./SettingsIcon\";\n\nimport \"./App.css\";\n\nfunction AppContent() {\n  const [time, setTime] = useState(new Date());\n  const [timesTable, setTimesTable] = useState(null);\n\n  const tick = () => {\n    setTime(new Date());\n  };\n\n  useEffect(() => {\n    fetch(\"https://api.jsonbin.io/b/5fc91906177c556ef9b649d1\")\n      .then((response) => response.json())\n      .then((data) => setTimesTable(data));\n  }, []);\n\n  useEffect(() => {\n    const timerID = setInterval(() => tick(), 1000);\n\n    return () => {\n      clearInterval(timerID);\n      // console.log(\"Unmount\"); // runs every seccond, idk why\n    };\n  });\n\n  return (\n    <div className=\"App\">\n      <SettingsIcon times={timesTable} />\n      <header className=\"App-body\">\n        <Countdown times={timesTable} />\n        <Period times={timesTable} />\n      </header>\n    </div>\n  );\n}\n\nexport default AppContent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"Localhost Message: This web app is being served \" +\n              \"cache-first by a service worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppContent from \"./components/AppContent\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppContent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onSuccess: () => console.log(\"good\"),\n  onUpdate: (registration) => {\n    if (registration && registration.waiting) {\n      registration.waiting.postMessage({ type: \"SKIP_WAITING\" });\n    }\n    window.location.reload();\n  },\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}